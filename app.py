import streamlit as st
import itertools
import pandas as pd
import random
import io

st.title("–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
file_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ)
factors_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥ —Ñ–∞–∫—Ç–æ—Ä–æ–≤"):
    st.session_state.factors = [f.strip() for f in factors_input.split("\n") if f.strip()]
    st.session_state.scores = {factor: 0 for factor in st.session_state.factors}
    st.session_state.pairs = list(itertools.combinations(st.session_state.factors, 2))
    random.shuffle(st.session_state.pairs)
    st.session_state.current_pair = 0
    st.session_state.total_pairs = len(st.session_state.pairs)  # –û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–∞—Ä
    st.session_state.finished = False
    st.session_state.comparison_history = []  # –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    st.rerun()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
if "factors" not in st.session_state or len(st.session_state.factors) < 2:
    st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ñ–∞–∫—Ç–æ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥ —Ñ–∞–∫—Ç–æ—Ä–æ–≤'!")
    st.stop()

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
def choose_winner(winner):
    if st.session_state.current_pair < st.session_state.total_pairs:
        f1, f2 = st.session_state.pairs[st.session_state.current_pair]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        if winner == "–Ω–∏—á—å—è":
            st.session_state.scores[f1] += 0.5
            st.session_state.scores[f2] += 0.5
            st.session_state.comparison_history.append([st.session_state.current_pair + 1, f1, 0.5, f2, 0.5])
        else:
            st.session_state.scores[winner] += 1
            loser = f1 if winner == f2 else f2
            st.session_state.comparison_history.append([st.session_state.current_pair + 1, winner, 1, loser, 0])

        st.session_state.current_pair += 1

    if st.session_state.current_pair >= st.session_state.total_pairs:
        st.session_state.finished = True

    st.rerun()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä
st.subheader(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {st.session_state.current_pair} / {st.session_state.total_pairs} –ø–∞—Ä")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É
if not st.session_state.finished and st.session_state.current_pair < st.session_state.total_pairs:
    f1, f2 = st.session_state.pairs[st.session_state.current_pair]
    st.write("–ö–∞–∫–æ–π —Ñ–∞–∫—Ç–æ—Ä –≤–∞–∂–Ω–µ–µ?")

    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button(f1, key=f"btn_{f1}_{f2}"):
            choose_winner(f1)
    with col2:
        if st.button("–ù–∏—á—å—è", key=f"btn_draw_{f1}_{f2}"):
            choose_winner("–Ω–∏—á—å—è")
    with col3:
        if st.button(f2, key=f"btn_{f2}_{f1}"):
            choose_winner(f2)

else:
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:")
    sorted_factors = sorted(st.session_state.scores.items(), key=lambda x: x[1], reverse=True)
    for factor, score in sorted_factors:
        st.write(f"**{factor}**: {score} –±–∞–ª–ª–æ–≤")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ (—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ)
    df_ranking = pd.DataFrame(sorted_factors, columns=["–§–∞–∫—Ç–æ—Ä", "–ë–∞–ª–ª—ã"])
    output_ranking = io.BytesIO()
    with pd.ExcelWriter(output_ranking, engine="openpyxl") as writer:
        df_ranking.to_excel(writer, index=False)
    output_ranking.seek(0)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ (–∏—Å—Ç–æ—Ä–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π)
    df_history = pd.DataFrame(st.session_state.comparison_history, columns=["‚Ññ –ø–∞—Ä—ã", "–§–∞–∫—Ç–æ—Ä 1", "–ë–∞–ª–ª 1", "–§–∞–∫—Ç–æ—Ä 2", "–ë–∞–ª–ª 2"])
    output_history = io.BytesIO()
    with pd.ExcelWriter(output_history, engine="openpyxl") as writer:
        df_history.to_excel(writer, index=False)
    output_history.seek(0)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel",
        data=output_ranking,
        file_name=file_name,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤ Excel",
        data=output_history,
        file_name=f"–∏—Å—Ç–æ—Ä–∏—è_{file_name}",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
