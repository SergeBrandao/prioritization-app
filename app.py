import streamlit as st
import itertools
import pandas as pd
import random
import io

st.title("–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
file_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ)
factors_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥ —Ñ–∞–∫—Ç–æ—Ä–æ–≤"):
    st.session_state.factors = [f.strip() for f in factors_input.split("\n") if f.strip()]
    st.session_state.scores = {factor: 0 for factor in st.session_state.factors}
    st.session_state.pairs = list(itertools.combinations(st.session_state.factors, 2))
    random.shuffle(st.session_state.pairs)
    st.session_state.current_pair = 0
    st.session_state.total_pairs = len(st.session_state.pairs)
    st.session_state.finished = False
    st.session_state.comparison_history = {}
    st.session_state.selected_winner = None
    st.rerun()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
if "factors" not in st.session_state or len(st.session_state.factors) < 2:
    st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ñ–∞–∫—Ç–æ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥ —Ñ–∞–∫—Ç–æ—Ä–æ–≤'!")
    st.stop()

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É
current_pair_index = st.session_state.current_pair
total_pairs = st.session_state.total_pairs
f1, f2 = st.session_state.pairs[current_pair_index]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
pair_key = f"{f1}-{f2}"
previous_winner = st.session_state.comparison_history.get(pair_key, None)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
def choose_winner(winner):
    st.session_state.selected_winner = winner

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
def confirm_choice():
    global previous_winner

    if previous_winner:
        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –Ω–æ–≤–æ–≥–æ
        if previous_winner == "–Ω–∏—á—å—è":
            st.session_state.scores[f1] -= 0.5
            st.session_state.scores[f2] -= 0.5
        elif previous_winner in st.session_state.scores:
            st.session_state.scores[previous_winner] -= 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if st.session_state.selected_winner and st.session_state.selected_winner in st.session_state.scores:
        if st.session_state.selected_winner == "–Ω–∏—á—å—è":
            st.session_state.scores[f1] += 0.5
            st.session_state.scores[f2] += 0.5
        else:
            st.session_state.scores[st.session_state.selected_winner] += 1

        st.session_state.comparison_history[pair_key] = st.session_state.selected_winner
        st.session_state.selected_winner = None
        st.rerun()

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
def change_choice():
    st.session_state.selected_winner = None
    st.session_state.comparison_history[pair_key] = None  # –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
    st.rerun()

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º
def move_to(index):
    if 0 <= index < total_pairs:
        st.session_state.current_pair = index
        st.session_state.selected_winner = None
        st.rerun()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
st.subheader(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current_pair_index + 1} / {total_pairs} –ø–∞—Ä")

st.write(f"–ö–∞–∫–æ–π —Ñ–∞–∫—Ç–æ—Ä –≤–∞–∂–Ω–µ–µ?")

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏)
def styled_button(text, key, is_selected):
    button_html = f"""
    <div style="
        padding: 10px;
        border: {'3px solid blue' if is_selected else '1px solid gray'};
        border-radius: 10px;
        text-align: center;
        font-size: 16px;
        background-color: white;
        cursor: pointer;
        margin-bottom: 10px;">
        {text}
    </div>
    """
    return st.markdown(button_html, unsafe_allow_html=True) if is_selected else st.button(text, key=key, on_click=lambda: choose_winner(text))

if previous_winner is None:
    col1, col2, col3 = st.columns(3)
    with col1:
        styled_button(f1, f"btn_{f1}_{f2}", False)
    with col2:
        styled_button("–ù–∏—á—å—è", f"btn_draw_{f1}_{f2}", False)
    with col3:
        styled_button(f2, f"btn_{f2}_{f1}", False)
else:
    col1, col2, col3 = st.columns(3)
    with col1:
        styled_button(f1, f"btn_{f1}_{f2}", previous_winner == f1)
    with col2:
        styled_button("–ù–∏—á—å—è", f"btn_draw_{f1}_{f2}", previous_winner == "–Ω–∏—á—å—è")
    with col3:
        styled_button(f2, f"btn_{f2}_{f1}", previous_winner == f2)

    st.button("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", on_click=change_choice)

if st.session_state.selected_winner:
    st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", on_click=confirm_choice)

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
col_back, col_home, col_end, col_next = st.columns(4)
with col_home:
    st.button("‚èÆ –í –Ω–∞—á–∞–ª–æ", on_click=lambda: move_to(0))
with col_back:
    st.button("‚¨Ö –ù–∞–∑–∞–¥", on_click=lambda: move_to(current_pair_index - 1))
with col_next:
    st.button("‚û° –í–ø–µ—Ä—ë–¥", on_click=lambda: move_to(current_pair_index + 1))
with col_end:
    st.button("‚è≠ –í –∫–æ–Ω–µ—Ü", on_click=lambda: move_to(total_pairs - 1))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
if all(value is not None for value in st.session_state.comparison_history.values()) and len(st.session_state.comparison_history) == total_pairs:
    st.subheader("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:")
    sorted_factors = sorted(st.session_state.scores.items(), key=lambda x: x[1], reverse=True)
    for factor, score in sorted_factors:
        st.write(f"**{factor}**: {score} –±–∞–ª–ª–æ–≤")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Excel
    df_ranking = pd.DataFrame(sorted_factors, columns=["–§–∞–∫—Ç–æ—Ä", "–ë–∞–ª–ª—ã"])
    output_ranking = io.BytesIO()
    with pd.ExcelWriter(output_ranking, engine="openpyxl") as writer:
        df_ranking.to_excel(writer, index=False)
    output_ranking.seek(0)

    df_history = pd.DataFrame([
        [idx + 1, pair.split("-")[0], 1 if winner == pair.split("-")[0] else 0.5 if winner == "–Ω–∏—á—å—è" else 0, 
         pair.split("-")[1], 1 if winner == pair.split("-")[1] else 0.5 if winner == "–Ω–∏—á—å—è" else 0]
        for idx, (pair, winner) in enumerate(st.session_state.comparison_history.items())
    ], columns=["‚Ññ –ø–∞—Ä—ã", "–§–∞–∫—Ç–æ—Ä 1", "–ë–∞–ª–ª 1", "–§–∞–∫—Ç–æ—Ä 2", "–ë–∞–ª–ª 2"])

    output_history = io.BytesIO()
    with pd.ExcelWriter(output_history, engine="openpyxl") as writer:
        df_history.to_excel(writer, index=False)
    output_history.seek(0)

    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", data=output_ranking, file_name=file_name, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤ Excel", data=output_history, file_name=f"–∏—Å—Ç–æ—Ä–∏—è_{file_name}", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
